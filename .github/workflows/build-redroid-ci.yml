name: Build ReDroid (hosted, auto docker image) - FIXED

on:
  workflow_dispatch:
    inputs:
      jobs_threads:
        description: 'make -j (建议小一点，例如 4)'
        required: false
        default: '4'

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    strategy:
      matrix:
        product: [ "redroid_x86_64", "redroid_arm64" ]
    env:
      JOBS: ${{ github.event.inputs.jobs_threads }}
      REPO_BRANCH: android-11.0.0_r48
      LOCAL_MANIFESTS_BRANCH: 11.0.0
      # 修复：使用 github.workspace（runner.workspace 是无效的）
      WORKDIR: ${{ github.workspace }}/redroid-workspace
      PRODUCT: ${{ matrix.product }}
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME || '' }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || '' }}

    steps:
    - name: Checkout workflow repo (files/scripts)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show runner disk/mem
      run: df -h && free -m

    - name: Ensure qemu-utils (small host deps)
      run: sudo apt-get update && sudo apt-get install -y qemu-utils

    - name: Create builder Dockerfile
      run: |
        mkdir -p builder
        cat > builder/Dockerfile <<'EOF'
        ARG BASE=ubuntu:22.04
        FROM ${BASE} AS builder
        ARG userid=1000
        ARG groupid=1000
        ARG username=builder

        ENV DEBIAN_FRONTEND=noninteractive
        ENV HOME=/home/${username}
        ENV LANG=C.UTF-8
        RUN apt-get update && apt-get install -y --no-install-recommends \
          git git-lfs curl ca-certificates gnupg flex bison gperf build-essential \
          zip unzip python3 python3-pip openjdk-11-jdk-headless \
          zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev lib32z-dev \
          ccache rsync libxml2-utils xsltproc bc wget sudo file locales e2fsprogs \
          && rm -rf /var/lib/apt/lists/*

        RUN mkdir -p /usr/local/bin && \
          curl -fsSLo /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo && \
          chmod a+x /usr/local/bin/repo

        RUN groupadd -g ${groupid} ${username} || true && \
            useradd -m -u ${userid} -g ${groupid} -s /bin/bash ${username} || true && \
            mkdir -p /home/${username}/bin && chown -R ${userid}:${groupid} /home/${username}

        RUN mkdir -p /ccache && chown ${userid}:${groupid} /ccache

        USER ${userid}:${groupid}
        WORKDIR /home/${username}
        ENV PATH=/usr/local/bin:/home/${username}/bin:$PATH
        ENV CCACHE_DIR=/ccache
        CMD ["/bin/bash"]
        EOF

    - name: Build redroid-builder image
      run: |
        docker build --build-arg userid=$(id -u) --build-arg groupid=$(id -g) --build-arg username=$(id -un) -t redroid-builder builder/

    - name: Prepare workspace directory (host)
      run: |
        rm -rf "${WORKDIR}"
        mkdir -p "${WORKDIR}"
        ls -lah "${WORKDIR}"

    - name: Repo init & sync (inside builder container)
      run: |
        set -euo pipefail
        # 在容器内运行 repo init / repo sync（容器内含 repo）
        docker run --rm -v "${WORKDIR}":/src -v $HOME/.ccache:/ccache -e CCACHE_DIR=/ccache redroid-builder /bin/bash -lc "\
          cd /src && \
          repo init -u https://android.googlesource.com/platform/manifest --git-lfs --depth=1 -b ${REPO_BRANCH} || true && \
          mkdir -p .repo/local_manifests && \
          git clone --depth=1 https://github.com/remote-android/local_manifests.git .repo/local_manifests -b ${LOCAL_MANIFESTS_BRANCH} || true && \
          repo sync -c -j4 || repo sync -c -j2 || true \
        "
    - name: Apply redroid patches (inside builder container)
      run: |
        docker run --rm -v "${WORKDIR}":/src -v $HOME/.ccache:/ccache -e CCACHE_DIR=/ccache redroid-builder /bin/bash -lc "\
          set -e; \
          cd /src; \
          git clone --depth=1 https://github.com/remote-android/redroid-patches.git /tmp/redroid-patches || true; \
          if [ -f /tmp/redroid-patches/apply-patch.sh ]; then /tmp/redroid-patches/apply-patch.sh /src || echo 'apply-patch returned non-zero'; else echo 'no redroid-patches script'; fi \
        "

    - name: Run build inside redroid-builder container
      run: |
        set -e
        docker run --rm -v "${WORKDIR}":/src -v $HOME/.ccache:/ccache -e CCACHE_DIR=/ccache -e JOBS=${JOBS} -e PRODUCT=${PRODUCT} redroid-builder /bin/bash -lc "\
          cd /src && \
          source build/envsetup.sh || true && \
          lunch ${PRODUCT}-userdebug || true && \
          echo 'Starting build ${PRODUCT}' && \
          m -j${JOBS} systemimage || make -j${JOBS} systemimage || true \
        "

    - name: List build output
      run: |
        set -e
        OUTDIR="${WORKDIR}/out/target/product/${PRODUCT}"
        if [ -d \"$OUTDIR\" ]; then
          echo 'Files in out dir:'
          ls -lah \"$OUTDIR\" || true
          du -sh \"$OUTDIR\" || true
        else
          echo 'No out dir found (可能编译失败或未生成).'
        fi

    - name: Try package root -> docker image (if root exists)
      continue-on-error: true
      run: |
        set -e
        OUTDIR="${WORKDIR}/out/target/product/${PRODUCT}"
        if [ -d "${OUTDIR}/root" ] && [ "$(ls -A ${OUTDIR}/root)" ]; then
          echo "root dir found - creating tar and importing to docker"
          TARNAME="redroid-rootfs-${PRODUCT}.tar"
          tar --xattrs -C "${OUTDIR}/root" -c . > "${TARNAME}"
          ls -lh "${TARNAME}"
          cat "${TARNAME}" | docker import -c 'ENTRYPOINT ["/init", "androidboot.hardware=redroid"]' - "redroid:${PRODUCT}-ci"
          docker image ls | grep "redroid" || true
          if [ -n "${GHCR_TOKEN}" ]; then
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin
            docker tag "redroid:${PRODUCT}-ci" "ghcr.io/${{ github.repository_owner }}/redroid:${PRODUCT}-ci"
            docker push "ghcr.io/${{ github.repository_owner }}/redroid:${PRODUCT}-ci"
          else
            echo "GHCR_TOKEN not set, skipping push"
          fi
        else
          echo "No root dir present; upload artifacts for manual image creation."
        fi

    - name: Upload build artifacts (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: redroid-artifacts-${{ matrix.product }}-${{ github.run_id }}
        path: |
          ${WORKDIR}/out/target/product/${PRODUCT}/system.img
          ${WORKDIR}/out/target/product/${PRODUCT}/vendor.img
          ${WORKDIR}/out/target/product/${PRODUCT}/product.img
          ${WORKDIR}/out/target/product/${PRODUCT}/root
        retention-days: 7

    - name: Final note
      if: always()
      run: |
        echo "Job finished for product=${PRODUCT}. 查看 artifact redroid-artifacts-${{ matrix.product }}-${{ github.run_id }} 或者容器镜像 redroid:${PRODUCT}-ci (如已创建)。"
